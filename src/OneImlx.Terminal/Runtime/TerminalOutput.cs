/*
    Copyright © 2019-2025 Perpetual Intelligence L.L.C. All rights reserved.

    For license, terms, and data policies, go to:
    https://terms.perpetualintelligence.com/articles/intro.html
*/

using System.Text.Json.Serialization;

namespace OneImlx.Terminal.Runtime
{
    /// <summary>
    /// Represents the output generated by the terminal server in response to <see cref="TerminalInput"/>.
    /// </summary>
    public sealed class TerminalOutput
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalOutput"/> class.
        /// </summary>
        /// <param name="input">The terminal input.</param>
        /// <param name="results">The results.</param>
        /// <param name="senderId">The sender id.</param>
        /// <param name="senderEndpoint">The sender endpoint.</param>
        [JsonConstructor]
        public TerminalOutput(TerminalInput input, object?[] results, string? senderId, string? senderEndpoint)
        {
            Input = input ?? throw new System.ArgumentNullException(nameof(input));

            if (input.Count != results.Length)
            {
                throw new TerminalException(TerminalErrors.InvalidRequest, "The input requests and results count does not match.");
            }

            Results = results;
            SenderId = senderId;
            SenderEndpoint = senderEndpoint;
        }

        /// <summary>
        /// The terminal input.
        /// </summary>
        [JsonPropertyName("input")]
        public TerminalInput Input { get; }

        /// <summary>
        /// The command router results.
        /// </summary>
        [JsonPropertyName("results")]
        public object?[] Results { get; }

        /// <summary>
        /// The sender endpoint.
        /// </summary>
        [JsonPropertyName("sender_endpoint")]
        public string? SenderEndpoint { get; }

        /// <summary>
        /// The sender identifier.
        /// </summary>
        [JsonPropertyName("sender_id")]
        public string? SenderId { get; }
    }
}
