#    Copyright (c) Perpetual Intelligence L.L.C. All Rights Reserved.
#
#    For license, terms, and data policies, go to:
#    https://terms.perpetualintelligence.com

name: build-test-publish

concurrency: github-release

# Manual trigger for deployment
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      suffix:
        type: choice
        description: 'The package deployment suffix'
        required: true
        options:
        - preview
        - rc
        - release
        default: preview
      registry:
        type: choice
        description: 'The package registry'
        required: true
        options:
        - github
        - nuget        
        default: github
        
jobs:
  setup:    
    runs-on: ubuntu-latest
    environment: github-release
    timeout-minutes: 10
    
    # Define environment variables to authenticate the package feeds
    env:
      PI_GITHUB_USERNAME_ENV: ${{ secrets.PI_GITHUB_USERNAME }}
      PI_GITHUB_PAT_ENV: ${{ secrets.PI_GITHUB_PAT }}
      PI_NUGET_PAT_ENV: ${{ secrets.PI_NUGET_API_KEY }}
      PI_PUBLISH_REGISTRY: github
      PI_CI_REFERENCE: package
      
    steps:

    # Checktout
    - name: Checkout
      uses: actions/checkout@v2

    # Read env    
    - name: Read Env
      run: cat .github/package_version.env >> $GITHUB_ENV                
      continue-on-error: false
      
    # Protocols package version
    # E.g. 2.3.8-preview.221225369 (latest build version including preview)
    # PI_DEPENDENCIES_SUFFIX will be empty for release version
    - name: Dependencies
      run: echo "PI_PROTOCOLS_PACKAGE_VERSION=${{ env.PI_MAJOR_VERSION }}.${{ env.PI_MINOR_VERSION }}.${{ env.PI_BUILD_VERSION }}${{ env.PI_DEPENDENCIES_SUFFIX }}" >> $GITHUB_ENV
      continue-on-error: false
    
    # Build Number
    # Establish a unique build number for current run YYMMDD{RUN_NUMBER}{RUN_ATTEMPT} e.g. 2201032602
    - name: Build Number
      run: echo "PI_BUILD_NUMBER=$(date +'%y%m%d')${{ github.run_number }}${{ github.run_attempt }}" >> $GITHUB_ENV
      continue-on-error: false
    
    # Setup preview package versions based on trigger
    # Format: <package>.2.3.6-preview.2201032602
    - name: Default metadata (preview)
      if: ${{ github.event.inputs.suffix == '' }}
      run: echo "PI_CI_PACKAGE_VERSION=${{ env.PI_MAJOR_VERSION }}.${{ env.PI_MINOR_VERSION }}.${{ env.PI_BUILD_VERSION }}-preview.${{ env.PI_BUILD_NUMBER }}" >> $GITHUB_ENV
      continue-on-error: false
    
    # Setup preview package versions
    # Format: <package>.2.3.6-preview.2201032602
    - name: Preview metadata
      if: ${{ github.event.inputs.suffix == 'preview' }}
      run: echo "PI_CI_PACKAGE_VERSION=${{ env.PI_MAJOR_VERSION }}.${{ env.PI_MINOR_VERSION }}.${{ env.PI_BUILD_VERSION }}-preview.${{ env.PI_BUILD_NUMBER }}" >> $GITHUB_ENV
      continue-on-error: false
      
    # Setup rc package versions
    # Format: <package>.2.3.6-rc.2201032602
    - name: RC metadata
      if: ${{ github.event.inputs.suffix == 'rc' }}
      run: echo "PI_CI_PACKAGE_VERSION=${{ env.PI_MAJOR_VERSION }}.${{ env.PI_MINOR_VERSION }}.${{ env.PI_BUILD_VERSION }}-rc.${{ env.PI_BUILD_NUMBER }}" >> $GITHUB_ENV
      continue-on-error: false
      
    # Setup release package versions
    # Format: <package>.2.3.6
    - name: Release metadata
      if: ${{ github.event.inputs.suffix == 'release' }}
      run: echo "PI_CI_PACKAGE_VERSION=${{ env.PI_MAJOR_VERSION }}.${{ env.PI_MINOR_VERSION }}.${{ env.PI_BUILD_VERSION }}" >> $GITHUB_ENV
      continue-on-error: false

    # Setup publish registry (github or nuget)
    # PI_PUBLISH_REGISTRY defaults to github
    - name: Registry metadata
      if: ${{ github.event.inputs.registry != '' }}
      run: echo "PI_PUBLISH_REGISTRY=${{ github.event.inputs.registry }}" >> $GITHUB_ENV
      continue-on-error: false
    
    # Print all env and directory
    - name: Print
      if: ${{ true }}  # Debug
      run: |
        env
        ls -R
      shell: bash
    
    # Setup .Net with global.json
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      
    # Setup Nuget
    - name: Setup NuGet.exe
      uses: NuGet/setup-nuget@v1.0.5
      with:
        nuget-version: latest

    # Publish PerpetualIntelligence.Cli
    - name: PerpetualIntelligence.Cli
      uses: ./.github/actions/push-package
      with:
        project: PerpetualIntelligence.Cli
        config: Release
        version: ${{ env.PI_CI_PACKAGE_VERSION }}
        ghapikey: ${{ env.PI_GITHUB_PAT_ENV }}
        nugetapikey: ${{ env.PI_NUGET_PAT_ENV }}
        registry: ${{ env.PI_PUBLISH_REGISTRY }}
