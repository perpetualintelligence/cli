@page "/webterminal"
@using Microsoft.Extensions.Hosting
@using OneImlx.Terminal.Apps.TestWasm.WebTerminal
@using OneImlx.Terminal.Runtime

@inject TerminalHostProvider TerminalHostProvider

@implements IDisposable

<PageTitle>Web Terminal</PageTitle>

<div style="display: flex; flex-direction: column; height: 100%;">

    <FluentLabel>Command</FluentLabel>
    <FluentTextField @bind-Value=@inputLine @onkeyup="HandleInput"></FluentTextField>

    <FluentLabel>Output</FluentLabel>
    <FluentTextArea Rows="10">
        @string.Join(Environment.NewLine, outputLines)
    </FluentTextArea>
</div>

@code {
    private string inputLine = "";
    private List<string> outputLines = new List<string>();
    private IHost? terminalHost;
    private ITerminalConsole? terminalConsole;
    private Task? backgroundRouter;
    private Timer? fetchOutputTimer;

    protected async override Task OnInitializedAsync()
    {
        if (TerminalHostProvider.IsTerminalHostRunning)
        {
            terminalHost = TerminalHostProvider.GetTerminalHost();
        }
        else
        {
            // Start the terminal host in a background task so that the UI can be rendered
            backgroundRouter = Task.Run(async () => await TerminalHostProvider.StartTerminalHostAsync());

            // Give time for router to initialize.
            await Task.Delay(500);
        }

        // Initialize terminal console
        terminalConsole = TerminalHostProvider.GetTerminalConsole();

        // Start a timer to periodically fetch output from terminalConsole
        fetchOutputTimer = new Timer(_ => FetchOutput(), null, TimeSpan.Zero, TimeSpan.FromMilliseconds(500));
    }

    private void HandleInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (terminalConsole == null)
            {
                throw new InvalidOperationException("Terminal console not initialized.");
            }

            TerminalWasmConsole terminalWasmConsole = (TerminalWasmConsole)terminalConsole;
            terminalWasmConsole.SimulateInput(inputLine);
        }
    }

    private void FetchOutput()
    {
        if (terminalConsole is TerminalWasmConsole console)
        {
            var output = console.Out.ToString();
            if (!string.IsNullOrEmpty(output))
            {
                InvokeAsync(() =>
                {
                    outputLines.Add(output);
                    ((StringWriter)console.Out).GetStringBuilder().Clear(); // Clear the output after fetching
                    StateHasChanged();
                });
            }
        }
    }

    public void Dispose()
    {
        fetchOutputTimer?.Dispose();
    }
}
