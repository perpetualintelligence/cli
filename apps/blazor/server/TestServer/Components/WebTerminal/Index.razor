@*
   This is a simple example using OneImlx.Terminal to build the Blazor Server terminal.
   Developers can add more validation and behavior to the terminal UX based on their custom requirements.
*@

@page "/webterminal"

@using Microsoft.Extensions.Hosting
@using OneImlx.Terminal.Apps.TestServer.Components.WebTerminal
@using OneImlx.Terminal.Configuration.Options
@using OneImlx.Terminal.Runtime
@using System.Threading
@using System.IO
@using Microsoft.AspNetCore.Components.Web
@using System.Text

@inject TestBlazorServerHostProvider TerminalHostProvider

@implements IDisposable

<PageTitle>Web Terminal</PageTitle>

<div style="display: flex; flex-direction: column; height: 100%;">
    <FluentTextArea @ref="terminalTextArea"
                    @onkeydown="HandleKeyDown"
                    @bind-Value=@bindValue Rows="30"
                    style="width: 100%; height: 100%; font-family: 'Consolas', monospace; resize: none; overflow-y: auto;">
    </FluentTextArea>
</div>

@code {
    private FluentTextArea terminalTextArea = null!;
    private StringBuilder currentInput = new();
    private StringBuilder currentOutput = new();
    private string bindValue = "";
    private string lastUnicode = "";
    private ITerminalConsole terminalConsole = null!;
    private ITerminalTextHandler terminalTextHandler = null!;
    private TerminalOptions terminalOptions = null!;
    private Timer? fetchOutputTimer;

    protected async override Task OnInitializedAsync()
    {
        if (!TerminalHostProvider.IsTerminalHostRunning)
        {
            // Start the terminal host in a background task so that the UI can be rendered
            _ = TerminalHostProvider.StartTerminalHostAsync();

            // Get the terminal console from the terminal host
            while (!TerminalHostProvider.IsTerminalHostRunning)
            {
                await Task.Delay(500);
            }
        }

        // Get the terminal console from the terminal host
        terminalConsole = TerminalHostProvider.GetTerminalConsole();
        terminalTextHandler = TerminalHostProvider.GetTerminalTextHandler();
        terminalOptions = TerminalHostProvider.GetTerminalOptions();

        // Start a timer to periodically fetch output from terminalConsole
        fetchOutputTimer = new Timer(_ => FetchOutput(), null, TimeSpan.Zero, TimeSpan.FromMilliseconds(500));
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        // Make sure the text area has focus
        terminalTextArea.FocusAsync();

        return Task.CompletedTask;
    }

    private Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ProcessInput();
        }
        else if (e.Key == "Backspace" && currentInput.Length > 0)
        {
            RemoveLastUnicodeCharacter();
        }
        else if (IsPrintableKey(e))
        {
            currentInput.Append(e.Key);
            lastUnicode = e.Key;
        }

        return Task.CompletedTask;
    }

    private void ProcessInput()
    {
        if (terminalConsole is TestBlazorServerConsole terminalServerConsole)
        {
            // Write the user input to the console so it can be displayed in the terminal.
            string currentInputString = currentInput.ToString();
            terminalServerConsole.WriteLineAsync(currentInputString);

            // Set the user input in the console so it can be read by the terminal application to run the command.
            terminalServerConsole.SetConsoleInput(currentInputString);
            currentInput.Clear();
        }
    }

    private void FetchOutput()
    {
        InvokeAsync(() =>
        {
            if (terminalConsole is TestBlazorServerConsole console)
            {
                currentOutput = console.GetConsoleOutput();
                RenderOutput();
            }
        });
    }

    private void RenderOutput()
    {
        bindValue = currentOutput.ToString();
        StateHasChanged();
    }

    public void Dispose()
    {
        fetchOutputTimer?.Dispose();
    }

    private bool IsPrintableKey(KeyboardEventArgs e)
    {
        // List of non-printable keys to ignore
        var nonPrintableKeys = new HashSet<string>
        {
            "Shift", "Control", "Alt", "CapsLock", "Escape", "Tab", "ArrowUp",
            "ArrowDown", "ArrowLeft", "ArrowRight", "End", "Home", "Insert",
            "Delete", "PageUp", "PageDown", "F1", "F2", "F3", "F4", "F5", "F6",
            "F7", "F8", "F9", "F10", "F11", "F12", "Meta", "ContextMenu", "Pause", "ScrollLock"
        };

        // Add caret to the list
        // The cared may be '> ' or >
        nonPrintableKeys.Add(terminalOptions.Router.Caret.Trim());

        return !nonPrintableKeys.Contains(e.Key);
    }

    private void RemoveLastUnicodeCharacter()
    {
        // Remove the last character using the TerminalTextHandler
        int currentTextLength = terminalTextHandler!.TextLength(currentInput.ToString());
        int lastUnicodeLength = terminalTextHandler.TextLength(lastUnicode);
        if (currentTextLength >= lastUnicodeLength)
        {
            currentInput.Remove(currentInput.Length - lastUnicode.Length, lastUnicode.Length);
        }
    }
}
